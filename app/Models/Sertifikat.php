<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;

class Sertifikat extends Model
{
    use HasFactory;

    protected $table = 'sertifikat';

    protected $fillable = [
        'pengajuan_magang_id',
        'nomor_sertifikat',
        'tanggal_terbit',
        'file_path',
        'template_used',
        'status',
        'generated_by',
        'generated_at',
        'approved_by',
        'approved_at',
        'digital_signature',
        'verification_code',
        'metadata',
        'download_count',
        'last_downloaded_at',
    ];

    protected $casts = [
        'tanggal_terbit' => 'date',
        'generated_at' => 'datetime',
        'approved_at' => 'datetime',
        'last_downloaded_at' => 'datetime',
        'metadata' => 'array',
        'download_count' => 'integer',
    ];

    /**
     * Relationship: Sertifikat belongs to PengajuanMagang
     */
    public function pengajuanMagang()
    {
        return $this->belongsTo(PengajuanMagang::class);
    }

    /**
     * Relationship: Sertifikat belongs to User (generated by)
     */
    public function generatedBy()
    {
        return $this->belongsTo(User::class, 'generated_by');
    }

    /**
     * Relationship: Sertifikat belongs to User (approved by)
     */
    public function approvedBy()
    {
        return $this->belongsTo(User::class, 'approved_by');
    }

    /**
     * Get certificate file URL
     */
    public function getFileUrlAttribute(): ?string
    {
        return $this->file_path ? asset('storage/' . $this->file_path) : null;
    }

    /**
     * Get status badge class
     */
    public function getStatusBadgeClassAttribute(): string
    {
        return match($this->status) {
            'draft' => 'badge-secondary',
            'generated' => 'badge-info',
            'approved' => 'badge-success',
            'rejected' => 'badge-danger',
            'revoked' => 'badge-warning',
            default => 'badge-light'
        };
    }

    /**
     * Get status label
     */
    public function getStatusLabelAttribute(): string
    {
        return match($this->status) {
            'draft' => 'Draft',
            'generated' => 'Dibuat',
            'approved' => 'Disetujui',
            'rejected' => 'Ditolak',
            'revoked' => 'Dicabut',
            default => 'Tidak Diketahui'
        };
    }

    /**
     * Generate certificate number
     */
    public static function generateCertificateNumber(): string
    {
        $year = date('Y');
        $month = date('m');
        
        // Get the last certificate number for this month
        $lastCertificate = self::whereYear('tanggal_terbit', $year)
            ->whereMonth('tanggal_terbit', $month)
            ->orderBy('id', 'desc')
            ->first();
        
        $sequence = 1;
        if ($lastCertificate && $lastCertificate->nomor_sertifikat) {
            // Extract sequence number from last certificate
            $parts = explode('/', $lastCertificate->nomor_sertifikat);
            if (count($parts) >= 2) {
                $sequence = intval($parts[0]) + 1;
            }
        }
        
        return sprintf('%03d/CERT-MAGANG/%s/%s', $sequence, $month, $year);
    }

    /**
     * Generate verification code
     */
    public static function generateVerificationCode(): string
    {
        return strtoupper(substr(md5(uniqid(rand(), true)), 0, 8));
    }

    /**
     * Check if certificate is valid
     */
    public function isValid(): bool
    {
        return $this->status === 'approved' && !is_null($this->file_path);
    }

    /**
     * Check if certificate can be downloaded
     */
    public function canBeDownloaded(): bool
    {
        return $this->isValid() && file_exists(storage_path('app/public/' . $this->file_path));
    }

    /**
     * Get certificate data for generation
     */
    public function getCertificateData(): array
    {
        $pengajuan = $this->pengajuanMagang;
        $user = $pengajuan->user;
        $profile = $user->pesertaProfile;
        $bidang = $pengajuan->bidangMagang;
        $penilaian = $pengajuan->penilaianAkhir;
        
        return [
            'participant_name' => $user->name,
            'nim' => $profile->nim ?? '',
            'university' => $profile->universitas ?? '',
            'major' => $profile->jurusan ?? '',
            'internship_field' => $bidang->nama_bidang,
            'start_date' => $pengajuan->tanggal_mulai->format('d F Y'),
            'end_date' => $pengajuan->tanggal_selesai->format('d F Y'),
            'duration' => $pengajuan->duration_in_months . ' bulan',
            'certificate_number' => $this->nomor_sertifikat,
            'issue_date' => $this->tanggal_terbit->format('d F Y'),
            'verification_code' => $this->verification_code,
            'grade' => $penilaian->grade ?? 'N/A',
            'score' => $penilaian->nilai_total ?? 0,
            'mentor' => $bidang->mentor ?? '',
            'location' => $bidang->lokasi ?? '',
        ];
    }

    /**
     * Generate certificate
     */
    public function generate(User $generator, string $template = 'default'): bool
    {
        try {
            // Generate certificate number if not exists
            if (!$this->nomor_sertifikat) {
                $this->nomor_sertifikat = self::generateCertificateNumber();
            }
            
            // Generate verification code if not exists
            if (!$this->verification_code) {
                $this->verification_code = self::generateVerificationCode();
            }
            
            // Set generation data
            $this->template_used = $template;
            $this->generated_by = $generator->id;
            $this->generated_at = now();
            $this->tanggal_terbit = now()->toDateString();
            $this->status = 'generated';
            
            // Store certificate data in metadata
            $this->metadata = $this->getCertificateData();
            
            // Generate file path (will be created by certificate generation service)
            $fileName = 'certificates/' . $this->pengajuan_magang_id . '_' . time() . '.pdf';
            $this->file_path = $fileName;
            
            $this->save();
            
            // Create notification for student
            Notifikasi::create([
                'user_id' => $this->pengajuanMagang->user_id,
                'title' => 'Sertifikat Dibuat',
                'message' => "Sertifikat magang Anda telah dibuat dengan nomor {$this->nomor_sertifikat}.",
                'type' => 'certificate_generated',
                'is_read' => false,
            ]);
            
            return true;
        } catch (\Exception $e) {
            return false;
        }
    }

    /**
     * Approve certificate
     */
    public function approve(User $approver): bool
    {
        $this->update([
            'status' => 'approved',
            'approved_by' => $approver->id,
            'approved_at' => now(),
        ]);
        
        // Create notification for student
        Notifikasi::create([
            'user_id' => $this->pengajuanMagang->user_id,
            'title' => 'Sertifikat Disetujui',
            'message' => "Sertifikat magang Anda dengan nomor {$this->nomor_sertifikat} telah disetujui dan dapat diunduh.",
            'type' => 'certificate_approved',
            'is_read' => false,
        ]);
        
        return true;
    }

    /**
     * Reject certificate
     */
    public function reject(User $rejector, string $reason): bool
    {
        $this->update([
            'status' => 'rejected',
            'approved_by' => $rejector->id,
            'approved_at' => now(),
        ]);
        
        // Add rejection reason to metadata
        $metadata = $this->metadata ?? [];
        $metadata['rejection_reason'] = $reason;
        $this->metadata = $metadata;
        $this->save();
        
        // Create notification for generator
        Notifikasi::create([
            'user_id' => $this->generated_by,
            'title' => 'Sertifikat Ditolak',
            'message' => "Sertifikat untuk {$this->pengajuanMagang->user->name} ditolak. Alasan: {$reason}",
            'type' => 'certificate_rejected',
            'is_read' => false,
        ]);
        
        return true;
    }

    /**
     * Revoke certificate
     */
    public function revoke(User $revoker, string $reason): bool
    {
        $this->update(['status' => 'revoked']);
        
        // Add revocation reason to metadata
        $metadata = $this->metadata ?? [];
        $metadata['revocation_reason'] = $reason;
        $metadata['revoked_by'] = $revoker->id;
        $metadata['revoked_at'] = now()->toISOString();
        $this->metadata = $metadata;
        $this->save();
        
        // Create notification for student
        Notifikasi::create([
            'user_id' => $this->pengajuanMagang->user_id,
            'title' => 'Sertifikat Dicabut',
            'message' => "Sertifikat magang Anda dengan nomor {$this->nomor_sertifikat} telah dicabut. Alasan: {$reason}",
            'type' => 'certificate_revoked',
            'is_read' => false,
        ]);
        
        return true;
    }

    /**
     * Record download
     */
    public function recordDownload(): void
    {
        $this->increment('download_count');
        $this->update(['last_downloaded_at' => now()]);
    }

    /**
     * Verify certificate by verification code
     */
    public static function verifyByCode(string $verificationCode): ?self
    {
        return self::where('verification_code', $verificationCode)
            ->where('status', 'approved')
            ->first();
    }

    /**
     * Get certificate age in days
     */
    public function getAgeInDaysAttribute(): int
    {
        return $this->tanggal_terbit ? $this->tanggal_terbit->diffInDays(now()) : 0;
    }

    /**
     * Check if certificate is recently issued (within 30 days)
     */
    public function isRecentlyIssued(): bool
    {
        return $this->age_in_days <= 30;
    }

    /**
     * Get file size in human readable format
     */
    public function getFileSizeAttribute(): string
    {
        if (!$this->file_path || !file_exists(storage_path('app/public/' . $this->file_path))) {
            return 'N/A';
        }
        
        $bytes = filesize(storage_path('app/public/' . $this->file_path));
        $units = ['B', 'KB', 'MB', 'GB'];
        
        for ($i = 0; $bytes > 1024 && $i < count($units) - 1; $i++) {
            $bytes /= 1024;
        }
        
        return round($bytes, 2) . ' ' . $units[$i];
    }

    /**
     * Scope: Only approved certificates
     */
    public function scopeApproved($query)
    {
        return $query->where('status', 'approved');
    }

    /**
     * Scope: Only valid certificates
     */
    public function scopeValid($query)
    {
        return $query->where('status', 'approved')
            ->whereNotNull('file_path');
    }

    /**
     * Scope: Recently issued certificates
     */
    public function scopeRecentlyIssued($query, $days = 30)
    {
        return $query->where('tanggal_terbit', '>=', now()->subDays($days));
    }

    /**
     * Scope: Filter by year
     */
    public function scopeByYear($query, $year)
    {
        return $query->whereYear('tanggal_terbit', $year);
    }

    /**
     * Scope: Filter by month
     */
    public function scopeByMonth($query, $year, $month)
    {
        return $query->whereYear('tanggal_terbit', $year)
            ->whereMonth('tanggal_terbit', $month);
    }

    /**
     * Get certificate statistics
     */
    public static function getCertificateStatistics(): array
    {
        $certificates = self::all();
        
        return [
            'total_certificates' => $certificates->count(),
            'approved_certificates' => $certificates->where('status', 'approved')->count(),
            'pending_certificates' => $certificates->where('status', 'generated')->count(),
            'rejected_certificates' => $certificates->where('status', 'rejected')->count(),
            'revoked_certificates' => $certificates->where('status', 'revoked')->count(),
            'total_downloads' => $certificates->sum('download_count'),
            'recent_certificates' => $certificates->where('tanggal_terbit', '>=', now()->subDays(30))->count(),
            'monthly_distribution' => $certificates->groupBy(function($cert) {
                return $cert->tanggal_terbit ? $cert->tanggal_terbit->format('Y-m') : 'unknown';
            })->map->count(),
        ];
    }

    /**
     * Generate batch certificates for completed internships
     */
    public static function generateBatchCertificates(User $generator): array
    {
        $completedInternships = PengajuanMagang::completed()
            ->whereDoesntHave('sertifikat')
            ->whereHas('penilaianAkhir', function($query) {
                $query->where('status', 'approved');
            })
            ->get();
        
        $results = [];
        
        foreach ($completedInternships as $internship) {
            $certificate = new self([
                'pengajuan_magang_id' => $internship->id,
                'status' => 'draft',
            ]);
            
            if ($certificate->generate($generator)) {
                $results['success'][] = $internship->user->name;
            } else {
                $results['failed'][] = $internship->user->name;
            }
        }
        
        return $results;
    }
}